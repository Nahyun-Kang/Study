//let 으로 선언한 변수는 재할당이 되지 않는다.
//변하지 않는 고정값을 상수값으로 만든다.

//변수명 설정을 통해 구분한다.
//const 변수 인 경우에는 myName
//const 상수 인 경우에는 MY_NAME 


//주의해야할 점
//참조형의 경우 const로 선언하여 재할당이 안될 줄 알았지만, 주솟값을 바꾸는 것이 아니고 객체 안의 프로퍼티가 바뀌는 것이기 때문에
//객체가 변할 수도 있다.


// 함수 스코프
// var 키워드 변수가 사라진 두 번째 문제는 Scope의 문제입니다. 
// let과 const 키워드로 선언한 변수는 if, for, function 등등 어떤 키워드와 관계없이 코드 블록, 즉 {} 중괄호로 감싸진 부분을 기준으로 scope를 갖게 되지만, var 키워드로 선언한 변수는 scope가 function에서만 구분되어 있습니다.
// let이나 const 키워드의 경우에는 중괄호로 감싸진 경우라면 모두 중괄호 밖에서는 지역 변수에 접근할 수 없습니다.

// 하지만 var 변수는 지역변수의 구분이 함수에만 있기 때문에 if, for, while, switch 등 다양한 상황에서 선언한 변수가 자칫, 전역변수의 역할을 하게 될 수도 있는 것이죠.

// 참고로 이렇게 함수를 기준으로만 적용되는 스코프를 함수 스코프, 코드 블록을 기준으로 적용되는 스코프를 블록 스코프라는 용어를 사용한다는 점도 참고해 주세요!



//호이스팅

console.log(myVariable);
var myVariable; // undefined

//변수의 선언이 끌려 올라가서 마치, 2번째 줄과 첫 번째 줄이 바뀐 것처럼 동작하는 데요.

// 이렇게 변수가 끌어올려 지는 현상을 '호이스팅(hoisting)'이라고 부른다는 점도 기억해 두시면 좋을 것 같아요 !
// 다행히 호이스팅은 선언과 동시에 값을 할당하더라도, 선언문만 올려지기 때문에 값은 그대로 두 번째 줄에 남아있는 데요.


// 하지만 이런 식으로 동작하는 방식은 코드의 흐름을 방해하기에 충분해 보이죠? 한 가지 주의해야 될 부분은, 함수를 선언할 때도 이 호이스팅이 적용됩니다.

